generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Organization {
    id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name        String
    host        String?
    apiKey      String?
    isDeleted   Boolean? @default(false)
    links       Links[]
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([name])
}

model Links {
    id             String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    link           String
    shortLink      String
    expirationTime DateTime?
    isDeleted      Boolean?     @default(false)
    orgId          Organization @relation(fields: [organizationId], references: [id])
    organizationId String  @db.Uuid

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([shortLink])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    organizations Organization[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
